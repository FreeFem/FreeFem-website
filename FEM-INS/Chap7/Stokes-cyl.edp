load "Element_P1bl"  //  
load "Element_P3"  //  
load "splitmesh3"
load "qf11to25"
// Strange  Couziex -Ravairt do not works  with symmetric grad  !!!!
// Connue inegalite de Korn wrong.
//load "plotPDF"
real s0=clock();
real r1=1,r2=10, r12=r2-r1;
border c1(t=0,2*pi){x=r1*cos(t);y=r1*sin(t);label=1;}
border c2(t=0,2*pi){x=r2*cos(t);y=r2*sin(t);label=2;}
NewMacro div(u) (dx(u#1)+dy(u#2)) EndMacro
NewMacro Grads(u) [dx(u#1),(dx(u#2)+dy(u#1))*.5,(dx(u#2)+dy(u#1))*.5,dy(u#2)] EndMacro
NewMacro Grad(u) [dx(u#1),dy(u#1) ,dx(u#2),dy(u#2)] EndMacro
NewMacro U(u,p) [u#1,u#2,p] EndMacro
NewMacro dn(u) ([u#1,u#2]'*N) EndMacro

real L = 10,L1 = L, L2= 2*L-L1, H = 8;
real[int,int] Xext=[[-L1,-H],[L2,-H], [L2,H], [-L1,H]];
real hex = 2*pi*r2/20;
int[int]  Nex=[2*L/hex,2*H/hex,2*L/hex,2*H/hex];
border bext(t=0,1;i) 
{
// i is the the index variable of the multi border loop 
// i%2 = 0 hori
  int ii = (i+1)%4; real t1 = 1-t;
  R3 Pi(Xext(i,0),Xext(i,1),0.);
  R3 Pii(Xext(ii,0),Xext(ii,1),0.);
 
  P = t1*Pi+t*Pii;
  label = (i==1) ? 3: 2;  
}
NewMacro QNU(PK,QK,hsize,qplot,form,Grad)
{
int qwait = qplot > 2;
verbosity= 0; 
string cmm = Stringification(PK)+"-"+Stringification(QK)+"-"+form;
real vr1=r1,vr2=-r2;
mesh Th=buildmesh(c1(-50)+bext(Nex)); //c2(50));
mesh Th3 = trunc(Th,1,split=5);
Th=adaptmesh(Th,IsMetric=1,hsize,nbvx=1000000);
 if(qplot>9) plot(Th,wait=0);
func Pk=PK;
fespace Wh2(Th,[Pk,Pk,QK]);
fespace Ph(Th,QK);
fespace Qh(Th3,P1);
fespace Uh(Th,P1);
int fill = Ph.ndof == Th.nt; // P0
real nu=1; 
real epsp= 1e-8; 
Wh2 U(u,p), U(v,q); 
real t0 =clock(); 

solve Stokes  (U(u,p),U(v,q)) =
    int2d(Th)(
            nu *2* Grad(u)'*Grad(v) 
            - p*div(v) - q*div(u)
	    )
  + on(1,u1=0,u2=0) 
  + on(2,u1=1,u2=0) ; // Inlet
  
  real cpu =clock()-t0; 
  Qh p2,q2;
  Uh U1=u1,U2=u2;
  solve Proj(p2,q2,solver="CG")= int2d(Th3)(p2*q2)-int2d(Th3)(p*q2);
  if(!fill) p2=p; 
 if(qplot>9) plot([u1,u2], wait=qwait);  
 if(qplot) plot(p2,[U1,U2], fill=0,wait=qwait,bb=[[-r1*2,-r1],[-r1*0.9,r1]],nbiso=50,pdf=cmm+"-1.eppdfs",cmm=cmm);
  func Ne1 = [ N.x,0.,N.y,0.];
  func Ne2 = [ 0., N.x,0.,N.y];
  cout <<  "\n\n" << cmm << " " << cpu << "s" << " Ndof = "<< Wh2.ndof << " "<< Th.nv << " " << Th.nt << endl;
  cout << " fx = "<< int1d(Th,1)( 2*nu*Grads(u)'*Ne1 - p*N.x) << endl; 
  cout << " fy = "<< int1d(Th,1)( 2*nu*Grads(u)'*Ne2 - p*N.y) << endl; 
   
  varf von1(U(u,p),U(v,q)) = on(1,u1=1,u2=0);
  varf von2(U(u,p),U(v,q)) = on(1,u1=0,u2=1);
  
  v1[] = von1(0,Wh2,tgv=1);
  cout << " fx 1  "<<      int2d(Th)(   nu *2* Grads(u)'*Grads(v)  - (p)*div(v) ) << endl;
  v1[] = von2(0,Wh2,tgv=1);
  cout << " fy 2  "<<      int2d(Th)(   nu *2* Grads(u)'*Grads(v)  - (p)*div(v) ) << endl;
  
 } 
 EndMacro
 int qplot =3;
QNU(P1nc,P0,0.2,qplot,"Sym",Grads) // Boggus
QNU(P1nc,P0,0.2,qplot,"NoSym",Grad) 
QNU(P2,P0,0.2,qplot,"Sym",Grads)
QNU(P2,P1nc,0.2,qplot,"Sym",Grads)
QNU(P2,P1,0.2,qplot,"Sym",Grads)
QNU(P1b,P1,0.1,qplot,"Sym",Grads)
QNU(P3,P2,0.2,qplot,"Sym",Grads)

 
 