/*F.Hecht, G.Lance, E. TrÃ©lat
Reusable template to solve optimization problem using IpOpt within FreeFEM
Example taken from "PDE constrained optimization within FreeFEM"
Example (2.1,2.2,2.3) in Section 2.1.2:
Solving template for LQ example via indirect method
\min_{u} \int_{\Omega} (y-y_d)^2\,dx + \alpha \int_{\Omega} u^2 \,dx
under the constraints
-\Delta y = u, y_{\vert \partial \Omega} = 0, y(0)= 0
*/

load "ff-Ipopt";
verbosity = 0;

// square mesh
mesh Th = square(50,50); // square mesh with boundary labels 1,2,3,4

fespace Vh(Th,P2); // finite element space with $P_1$ elements
int nbs = Vh.ndof; // number of degrees of freedom

Vh Y,V,U,P,Q,theta;
Vh YD = 1.0; // target


// Bounds on control u_m \leq u \leq u_M
real um = -10000;
real uM = 10000;

real alpha = 1.0;

// Variational formulations
macro grad(Y) [dx(Y), dy(Y)] //

// Solve state equation
macro state() {
	solve State(Y,V) = int2d(Th)( grad(Y)'*grad(V) )
					 - int2d(Th)( U*V )
					 + on(1,2,3,4,Y=0);
} //

// Solve adjoint equation
macro adjoint() {
	solve Adjoint(P,Q) = int2d(Th)( grad(P)'*grad(Q) )
					 + int2d(Th)( (Y-YD)*Q )
					 + on(1,2,3,4,P=0);
} //

// Interpolate the gradient for a given scalar product
macro interpgrad() {
	solve L2grad(theta,V) = int2d(Th)( theta*V ) - int2d(Th)( (alpha*U-P)*V );
} //

// matrix for the numerical gradient (for L^2 product, the matrix coincides with the mass matrix)
varf vB(Y,V) = int2d(Th)(Y*V);
matrix M = vB(Vh,Vh,solver=sparsesolver); 

func real J(real[int] &X)
{
	// Value of the control
	U[] = X;
	
	// Solve state equation
	state;
	
	// L2 cost for target function
	real cost = 0.5*(int2d(Th)((Y-YD)^2) + alpha*int2d(Th)(U^2));
	return cost;
}

func real[int] gradJ(real[int] &X)
{	
	// Value of the control
	U[] = X;
	
	// Solve state equation
	state;
	
	// Solve adjoint equation
	adjoint;	
	
	// Interpolate the gradient
	interpgrad;
	real[int] dJ = M*theta[];
	return dJ;
}


// Variable bounds + initialisation
real[int] xub(nbs);
real[int] xlb(nbs);
real[int] start(nbs);

xub = uM;
xlb = um;
start = 0.2; 

// Launch Ipopt
IPOPT(J,gradJ,start,optfile="ipopt.opt"); // No Hessian -> BFGS

U[] = start;
plot(Th,U,fill=1,value=1,wait=1,dim=3);
