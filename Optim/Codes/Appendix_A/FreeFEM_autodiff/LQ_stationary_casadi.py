# Reusable template for the solving of a PDE constrained optimization problem
# Linear quadratic example
# \min_{u} \int_{\Omega} (y-y_d)^2\,dx + \int_{\Omega} u^2 \,dx
# under the constraints
# -\Delta y + f(y) = u, y_{\vert \partial \Omega} = 0
# unknowns X = (y,u)
# use of casadi

import casadi as ca # pip install casadi if not available
import numpy as np

from scipy.sparse import coo_matrix

# import matrices generated by FreeFEM in the triplet format
ndof = int(np.loadtxt('ndof.txt'))
iA, jA, AM = np.loadtxt('A.txt', unpack=1, skiprows=3); 
iB, jB, BM = np.loadtxt('B.txt', unpack=1, skiprows=3);
Ac = coo_matrix( (AM, (iA, jA)), shape=(ndof,ndof)); # triplet format
Bc = coo_matrix( (BM, (iB, jB)), shape=(ndof,ndof));

L = np.loadtxt('L.txt', unpack=1, skiprows=1,usecols=1); # Array for volume constraint

# Number of degrees of freedom
str_ndof = str(ndof)
print(ndof);

# Target
yd = np.ones(ndof);
yd *= 0.1;

# put data in the right format for casadi
A = ca.MX(Ac);
B = ca.MX(Bc);
xd = ca.MX(yd);

alpha = 0.1;

# -----------------------------------------------------------------------------
#                   Test Opti CasADi
# -----------------------------------------------------------------------------

# Unknowns
opti = ca.Opti()
x = opti.variable(ndof)
u = opti.variable(ndof)

opti.minimize( 0.5*(x.T-xd.T)@B@(x-xd) + 0.5*alpha*u.T@B@u ) # cost function
opti.subject_to( A@x - B@u == 0.0 ) # PDE constraint
opti.subject_to( ca.dot(L,u) == 1.0/4.0) # additional volume constraint
opti.subject_to( opti.bounded(0,u,1) ) # bounds on the control

# Specify ipopt solver and options
opti.solver('ipopt',{'ipopt':{'max_iter':50, 'tol':1.e-12,'hessian_approximation':'limited-memory'}})

# Solve the problem
sol = opti.solve()

# -----------------------------------------------------------------------------
#                   Plot Solution
# -----------------------------------------------------------------------------

# pour plot avec FFEM
np.savetxt('upy.txt', sol.value(u), delimiter=' ', header=str_ndof, comments='')   # X is an array


